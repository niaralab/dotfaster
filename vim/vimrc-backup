" Arquivo de configuração do vim
" Criado: Qua 02/Ago/2006 hs 09:19
" Last Change: sex 02 dez 2016 11:22:23 BRT
" Autor: Sergio Luiz Araujo Silva
" Codificação: utf-8
" Site: http://vivaotux.blogspot.com
" Mail: voyeg3r  gmail
" Twitter: http://www.twitter.com/voyeg3r
" Licence: Licença: Este arquivo é de domínio público
" Garantia: O autor não se responsabiliza por eventuais danos
" causados pelo uso deste arquivo.
" References: https://gist.github.com/voyeg3r/51031/3613d3970e4d56762c7ea1265083dd57e5428ee9
"
"
"                 ( O O )
"  +===========oOO==(_)==OOo==============+
"  |                                      |
"  |    °v°    Sergio Luiz Araujo Silva   |
"  |   /(_)\  Linux User #423493          |
"  |   ^ ^    voyeg3r   gmail.com        |
"  +======================================+

" Plug bootstrap - Install Plug if it is not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.dotfiles/rcfiles/vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

colo molokai

" autoload vimrc
"augroup reload_vimrc
"    autocmd!
"    autocmd BufWritePost $MYVIMRC source $MYVIMRC
"augroup END

" Function SafeLineDelete()
function! SafeLineDelete()
    exec "normal \"_dd"
endfunction
imap <C-D> <Esc>:call SafeLineDelete()<CR>i


" config for silversearcher ag
" "let g:agprg="ag --column"
" let g:ackprg = 'ag --nogroup --nocolor --column'

filetype off

call plug#begin('~/.dotfiles/rcfiles/vim/bundle')

"Plug 'Raimondi/delimitMate'
Plug 'mattn/emmet-vim'
Plug 'jiangmiao/auto-pairs'
Plug 'vim-syntastic/syntastic'
Plug 'terryma/vim-expand-region'
Plug 'chrisbra/NrrwRgn'
Plug 'vim-scripts/AutoComplPop'
Plug 'ryanoasis/vim-webdevicons'
Plug 'rking/ag.vim'
Plug 'sjl/gundo.vim'
Plug 'tmhedberg/matchit'
Plug 'scrooloose/nerdtree'"
Plug 'chrisbra/NrrwRgn'
"Plug 'rstacruz/sparkup'
Plug 'mattn/emmet-vim'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-abolish'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline'
Plug 'eparreno/vim-l9'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-repeat'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'mattn/webapi-vim' | Plug 'christoomey/vim-quicklink'
Plug 'tpope/vim-surround'
Plug 'vimwiki/vimwiki'
Plug 'vim-scripts/VisIncr'
Plug 'wellle/targets.vim'
Plug 'haya14busa/incsearch.vim'
Plug 'rhysd/clever-f.vim'
Plug 'skywind3000/asyncrun.vim'
" manually installed
"Plug '~/.vim/bundle/setcolors/setcolors.vim'

"function! BuildYCM(info)
"    if a:info.status == 'installed' || a:info.force
"        !./install.py
"    endif
"endfunction
"Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }


" Color themes
Plug 'yosiat/oceanic-next-vim'
Plug 'altercation/vim-colors-solarized'
Plug 'duythinht/inori'
Plug 'wesgibbs/vim-irblack'
Plug 'morhetz/gruvbox'
Plug 'alessandroyorba/despacio'
Plug 'jacoborus/tender.vim'

filetype plugin indent on    " required


" All of your Plugins must be added before the following line
" Add plugins to &runtimepath
call plug#end()

" I don't know why I should do this, when i figure out...
"source ~/.vim/bundle/setcolors/setcolors.vim

" syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0



" mapping for incsearch plugin
"nnoremap <Esc><Esc> :<C-u>nohlsearch<CR>
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" incsearch plugin
" :h g:incsearch#auto_nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
let g:incsearch#magic = '\v'
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j " Delete comment character when joining commented lines
endif
"

" mapping for incsearch plugin

" adding my personal snippets to ultisnippets
set runtimepath+=~/.vim/snippets

"let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']
"let g:UltiSnipsSnippetsDir=expand('~/.dotfiles/rcfiles/vim/snippets/')
"let g:UltiSnipsSnippetDirectories=['UltiSnips', 'snippets']

" use this to quickly go to normal mode
set timeoutlen=1000 ttimeoutlen=0

" my id
let g:snips_author = "Sergio Luiz Araujo Silva"
let g:snips_site = "http://vivaotux.blogspot.com"
let g:snips_twitter = "http://www.twitter.com/voyeg3r"

let g:syntastic_python_python_exec = '/usr/bin/python'

" this function and command allows you to go back to the
" position you where before doing a global command
command! -nargs=* G call s:G(<q-args>)
function! s:G(args)
    let saved_position = winsaveview()
    exe 'g'.a:args
    call winrestview(saved_position)
endfunction

" air-line
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" configuratin to ag plugin
let g:agprg="<custom-ag-path-goes-here> --column"

" mappgings for indenting and keep visual selection
nmap <leader>u <<
nmap <leader>i >>
vmap <leader>u <gv
vmap <leader>i >gv

" mapeamento pra inserir quebra de linha em modo normal
map <leader><cr> a<cr><esc>

map <S-F12> :exec '!'.getline('.')<cr>

" I use terryma/vim-expand-region with following mapping:
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" http://vimcasts.org/episodes/creating-mappings-that-accept-a-count/
" countable changes
" nnoremap Q @='n.'<CR>
nnoremap Q :normal n.<CR>

" map to paste from clipboard with Ctrl-Alt-p
nmap <C-M-P> "+p
imap <C-M-P> <esc>"+pA

" auto reload vimrc when editing it
autocmd! bufwritepost .vimrc source ~/.vimrc

" configurações so plugin ultisnips
" Ctrl-j next snip -- Ctrl-k previous
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsExpandTrigger="<C-Space>"
let g:UltiSnipsListSnippets="<c-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

syntax on
set omnifunc=syntaxcomplete#Complete
set completeopt+=longest
set cot-=preview "disable doc preview in omnicomplete

" para que o shell exiba as variáveis corretamente
" http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=552108
let g:is_posix = 1

" http://www.hazaah.com/programming/textmate-and-vim/
" :find file
set path+=**

" omini completion for python
" autocmd FileType python set omnifunc=pythoncomplete#Complete
" autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
" autocmd FileType css set omnifunc=csscomplete#CompleteCSS
" autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
" autocmd FileType php set omnifunc=phpcomplete#CompletePHP
" autocmd FileType c set omnifunc=ccomplete#Complete

autocmd fileType vim set keywordprg=:help

set fileformats=unix,mac,dos
" remember some stuff after quiting vim:
" marks, registers, searches, buffer list
"set viminfo='20,<50,s10,h,%
set viminfo='10,\"100,:20,%,n~/.viminfo
set history=1000
setlocal complete=.,w,k,b,u,t,i
"set clipboard=unnamed
"set clipboard=unnamedplus
set complete-=k complete+=kspell
set spelllang=pt,en
set nospell
"highlight clear SpellBad
"highlight SpellBad term=reverse cterm=underline
set spellsuggest=8
"map <special> <s-F7> <esc>:set spell!<cr>
"set grepprg=grin
"set grepprg=grep\ -r\ --exclude=*.svn
set grepformat=%f:%l:%m
"set grepprg=grep\ -rinsE
" como usar o grep dentro do vim
" :vim /\cbash/gj ~/.vim/**/*.wiki
" :cn ......... abre o próximo
" :cp ......... abre o prévio
map <S-F2> :copen<CR>

" fold text object
" http://vim.wikia.com/wiki/Creating_new_text_objects
vnoremap af :<C-U>silent! normal! [zV]z<CR>
omap af :normal Vaf<CR>
set fdm=marker

map <special><F3> :NERDTreeToggle<cr>

" To set the toolbars off (icons on top of the screen)
set mouse=a

set background=dark
let g:solarized_termcolors = 256
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"

syntax enable

if has('gui_running')
    set background=light
else
    set background=dark
endif

if ! has("gui_running")
  set t_Co=256
  "colo wombat
  "colo badwolf
  colo molokai
endif

" turn off the toolbar and menubar
if has('gui_running')
 set anti gfn=Ubuntu\ Mono\ 13,Monaco\ 10,Bpmono\ 11,\ Envy\ Code\ R\ 10
end

" correção do plugin surround para a letra 's'
xmap <Leader>s <Plug>Vsurround

" http://stackoverflow.com/questions/4312664/is-there-a-vim-command-to-select-pasted-text
" http://vimcasts.org/episodes/bubbling-text/
" o mapeamento abaixo permite reselecionar texto recem colado ou selecionado
nmap gV `[v`]

" select last paste in visual mode
nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'

nmap <special> <F9> <esc>:w<cr>
inoremap <special> <F9> <C-O>:w<cr>

" este mapeamente permite criar cloze deletions para o anki de forma simplificada
vmap \c "adi{{c1::<c-r>a}}<esc>

cab W  w
cab Wq wq
cab Q  q


" remove linhas duplicadas
" remove duplicated lines
" see Preserve function definition

fun! DelBlank()
    "call Preserve("g/^\\n\\{2,}/d")
    keepjumps call Preserve("g/^$/,/./-j")
endfun
map <special> <leader>d :silent! call DelBlank()<cr>
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
nmap _= :call Preserve("normal gg=G")<CR>

" Eesta função guarda o local do cursor em 'save_cursor' e como
" executa uma substituição armazena antes o ultimo
" registro de buscas em 'old_query'
fun! CleanExtraSpaces()
    call Preserve("%s/\\s\\+$//e")
endfun
com! Cls :call Preserve("%s/\\s\\+$//e")<CR>

if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh :call CleanExtraSpaces()
endif

" Highlight redundant whitespace and tabs.
" This has the advantage of not highlighting each space you type at
" the end of the line, only when you open a file or leave insert
" mode. Very neat."
highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

" Create a red/red scheme
highlight Problem ctermbg=red guibg=red
" Highlight leading tabs - tab misturado com espaço
match Problem /^\s\*\t\+\s\*/

" this function gets last 20 cmds to new buffer
fun! s:RedirHistoryCommands()
  set paste
  redir @r
  history : -20,
  redir End
  new
  put r
  set nopaste
endfun
command! -nargs=0 GetHistory call s:RedirHistoryCommands()
" q:22kyG ctrl-w-q p

" Utility function that save last search and cursor position
" http://technotales.wordpress.com/2010/03/31/preserve-a-vim-function-that-keeps-your-state/
" video from vimcasts.org: http://vimcasts.org/episodes/tidying-whitespace
function! Preserve(command)
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    " Do the business
    execute a:command
    " Restore previous search history and cursor position
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction

fun! Setutf8()
  " source: http://stackoverflow.com/questions/9310274/how-can-i-use-vim-to-convert-my-file-to-utf8
  :set fileencoding=utf8
  :w!
endfunction

fun! Keeponlymp3()
" this function keeps only mp3 urls in current text
  :%s/mp3/mp3\r/g
 :%s/.*\(http.*.mp3\).*/\1/g
 :g!/\.mp3/d
endfun
com! KeepMp3 call Preserve(Keeponlymp3())

fun! Keeponlypdf()
" this function keeps only pdf urls in current text
 :%s/.*\(http.*.pdf\).*/\1/g
 :g!/\.pdf/d
endfun
com! KeepPdf call Preserve(Keeponlymp3())

" dos2unix ^M
fun! Dos2unixFunction()
    call Preserve("%s/$//g")
    set ff=unix
    set encoding=utf-8
    set fileencoding=utf-8
endfun
com! Dos2Unix call Dos2unixFunction()

" this function does more tha camel case
" it makes some changes needed to my flashcards
fun! CreateDeck()
  normal jyyp
  .s, *([^)]*),,ge
  .s,.*,\L&,ge
  ".s/ \([a-z]\)/\u\1/ge
  ".s/^./\U&/ge
  .s/.$/.mp3/g
  .s/.*/[sound:&]/ge
  .s/[,' ]//ge
  .s/-//ge
  normal kk
  .s,$,;,g
  normal JJ
  .s,\s\+\[,[,ge
  .s,[?!],,ge
  .s,\.\.,.,ge
  normal jj
endfun
com! CamelCase call Preserve(CreateDeck())
nmap <silent> <c-k> :keepjumps call CreateDeck()<cr>

" marca como erro duas palavras identicas duplicadas
syntax match DoubleWordErr "\c\<\(\a\+\)\_s\+\1\>"
hi def link DoubleWordErr Error

syntax keyword WordError teh

" Esta função testa as 5 primeiras linhas do arquivo
" se nelas não houver "Last Change" ele passa batido
" ou seja não insere o cabeçalho
" usr_41.txt
fun! InsertChangeLog()
  let l:flag=0
  for i in range(1,5)
    if getline(i) !~ '.*Last Change.*'
      let l:flag = l:flag + 1
    endif
  endfor
  if l:flag >= 5
    normal(1G)
    call append(0, "Arquivo: <+Description+>")
    call append(1, "Criado: " . strftime("%a %d/%b/%Y hs %H:%M"))
    call append(2, "Last Modified: " . strftime("%a %d/%b/%Y hs %H:%M"))
    call append(3, "autor: <+digite seu nome+>")
    call append(4, "site: <+digite o endereço de seu site+>")
    call append(5, "twitter: <+your twitter here+>")
    call append(6, "email: <+seu email+>")
    normal gg
  endif
endfun


function! LastModified()
    if &modified
        let _s=@/
        let save_cursor = getpos(".")
        let n = min([20, line("$")])
        keepjumps exe '1,' . n . 's#^\(.\{,10}Last Change: \).*#\1' .
                    \ strftime('%c') . '#e'
        let @/=_s
        call histdel('search', -1)
        call setpos('.', save_cursor)
    endif
endfun
autocmd BufWritePre * :call Preserve(LastModified())
map <silent> <F9> <esc>:keepjumps call Preserve(LastModified())<cr>


"function! UpdateLastMod()
"   let l:winview = winsaveview()
"   execute '1,10/^:Change:/s/:Change:.*/:Change: ' . strftime('%Y-%m-%d %H:%M') . '/e'
"   call winrestview(l:winview)
"endfunction

cab W  w
cab Wq wq
cab Q  q


" Create a red/red scheme
highlight Problem ctermbg=red guibg=red
" Highlight leading tabs - tab misturado com espaço
match Problem /^\s\*\t\+\s\*/

" Highlight redundant whitespace and tabs.
" This has the advantage of not highlighting each space you type at
" the end of the line, only when you open a file or leave insert
" mode. Very neat."
highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

" remove linhas duplicadas
" remove duplicated lines
" see Preserve function definition
fun! DelBlankFunction()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    :g/^\n\{2,}/d
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun
com! DelBlank call DelBlankFunction()
map <special> <leader>d :keepjumps call DelBlankFunction()<cr>

nmap _= :call Preserve("normal gg=G")<CR>


" Eesta função guarda o local do cursor em 'save_cursor' e como
" executa uma substituição armazena antes o ultimo
" registro de buscas em 'old_query'
fun! CleanExtraSpacesFunction()
    :call Preserve("%s/\\s\\+$//e")
endfun
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
com! CleanESpaces call CleanExtraSpacesFunction()

" Utility function that save last search and cursor position
" http://technotales.wordpress.com/2010/03/31/preserve-a-vim-function-that-keeps-your-state/
" video from vimcasts.org: http://vimcasts.org/episodes/tidying-whitespace
function! Preserve(command)
    " Preparation: save last search, and cursor position.
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    execute a:command
    " Clean up: restore previous search history, and cursor position
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction

if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh :call CleanExtraSpacesFunction()
endif

map <silent> <F9> <esc>:call LastModified()<cr>
let g:BASH_AuthorName = 'Sergio Luiz Araujo Silva'
let g:BASH_Email = 'voyeg3r at gmail'
let g:BASH_Company = ''

" place holders snippets
" File Templates
" --------------
"  <leader>j jumps to the next marker
" iabbr <buffer> for for <+i+> in <+intervalo+>:<cr><tab><+i+>
function! LoadFileTemplate()
  "silent! 0r ~/.vim/templates/%:e.tmpl
  syn match vimTemplateMarker "<+.\++>" containedin=ALL
  hi vimTemplateMarker guifg=#67a42c guibg=#112300 gui=bold
endfunction

function! JumpToNextPlaceholder()
    let old_query = getreg('/')
    echo search("<+.\\++>")
    exec "norm! c/+>/e\<CR>"
    call setreg('/', old_query)
endfunction
autocmd BufNewFile * :call LoadFileTemplate()
nnoremap <special> <leader>j :keepjumps call JumpToNextPlaceholder()<CR>a
inoremap <special> <leader>j <ESC>:keepjumps call JumpToNextPlaceholder()<CR>a

" The function must be used in a piece of subtitles
" in order to cleyan it, join the lines and put the results
" on clipboard to be pasted on anki
fun! CleanSubtitles()
    let old_query = getreg('/')
    :g/^\(\s\+\)\=\d\+$/d
    :g/^\(\s\+\)\=\d\+.*-->\s\d[^,]*,\d\d\d$/d
    :%j
    :%s/,/, /g
    :%s,\s\+, ,g
    :%y+
    call setreg('/', old_query)
endfun
command! -nargs=0 GetSubs :call CleanSubtitles()

" source: http://ddrscott.github.io/blog/2016/vim-toggle-movement/
function! ToggleHomeZero()
    let pos = getpos('.')
    execute "normal! ^"
    if pos == getpos('.')
        execute "normal! 0"
    endif
endfunction
nnoremap 0 :call ToggleHomeZero()<CR>

" index do vim wiki
let g:vimwiki_list = [{'path': '~/.vim/wiki/', 'index': 'main'}]

" Buble single lines - mover linhas
" http://vimcasts.org/episodes/bubbling-text/
nmap <special> <c-up> ddkP
nmap <special> <c-down> ddp
"buble multiple lines
xmap <c-up> xkP`[V`]
xmap <c-down> xp`[V`]
" se houver um trecho com seleção visual pode-se copiar
" usando Ctrl-c graças ao mapeamento abaixo
xmap <c-c> "+y

set nocompatible
set modeline
set modelines=5
set tabstop=2
set shiftwidth=4
set shiftround
"set copyindent
set softtabstop=4
set expandtab
set encoding=utf-8
set fileencoding=utf-8
set scrolloff=3
"set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest,full
set visualbell
"set cursorline "destaca linha atual
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set relativenumber
set number
set undofile
set undodir=~/.vimundo

set ignorecase
set smartcase
set smarttab
"set smartindent
set infercase
set incsearch
set showmatch
set hlsearch
set wrap
set linebreak
set nolist       " list disables linebreak
set autoread      " recarrega arquivos alterados fora do vim

set textwidth=66
"set formatoptions+=a
set formatoptions+=l
set formatoptions+=t
"set formatprg=par\ -w70j
"set colorcolumn=85
"set listchars=tab:▸\ ,eol:¬
set listchars=trail:·,precedes:«,extends:»,eol:↲,tab:▸\
set matchpairs+=<:>

set wildignore+=.hg,.git,.svn           " Version control
set wildignore+=*.aux,*.out,*.toc         " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg  " binary images
set wildignore+=*.jpeg,*.mp3,*.mp4        " binary images
set wildignore+=*.luac              " Lua byte code
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.pyc               " Python byte code
set wildignore+=*.spl               " compiled spelling word lists
set wildignore+=*.sw?               " Vim swap files
set wildignore+=*.DS_Store?            " OSX bullshit

" to reselect use gv in normal mode
nnoremap <S-F11> <ESC>:set hls!<cr>
inoremap <S-F11> <C-o>:set hls!<cr>
vnoremap <S-F11> <ESC>:set hls!<cr> <bar> gv
"nnoremap / :set hls<cr>/

" make copying from visual selection more sane
" source: http://ddrscott.github.io/blog/2016/yank-without-jank/
vnoremap <expr>y "my\"" . v:register . "y`y"
nmap <silent> <F11> :exec &nu==&rnu? "se nu!" : "se rnu!"<CR>

" map <S-F12> <esc>:dig<cr> " mostra os digrafos do tipo Word®
" togle between number nonumber and relativenumber
" source: http://stackoverflow.com/questions/4387210/vim-how-to-map-two-tasks-under-one-shortcut-key
" source: http://superuser.com/questions/339593/vim-toggle-number-with-relativenumber
nmap silent> <F10> :exec &nu==&rnu? "se nu!" : "se rnu!"<CR>

map <BS> X

" the below mapping selects function names
onoremap <silent> F :<C-U>normal! 0f(hviw<CR>

set nopaste
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode
" source hacking-vim p-138
nnoremap p p=`]
nnoremap <c-p> p

nnoremap <F5> :GundoToggle<CR>

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" Sudo to write
cmap w!! w !sudo tee % >/dev/null
command! SaveAsRoot w !sudo tee %

" mapping to reload ~/.vimrc
map <silent> <M-v> :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
map <silent> <leader>v :e ~/.vimrc<cr>
map <silent> <leader>z :e ~/.zshrc<cr>

" copy current buffer to clipboard
" nmap <leader>b :%y+<cr>

autocmd! BufWritePost .vimrc source %

nnoremap <leader>w :set wrap! wrap?<cr>

au! VimEnter * match ErrorMsg /^\t\+/
au! VimEnter * match ErrorMsg / $/


" statusline configuration
set statusline=%f
set statusline+=%=
set statusline+=%l
set statusline+=/
set statusline+=%L

nmap n nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

augroup sh
    au BufNewFile *.sh 0r ~/.vim/skel/template.sh
    au BufNewFile *.sh exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
    "au BufWritePost *.sh :silent !chmod a+x <afile>
augroup end

augroup zsh "{{{
au BufNewFile *.zsh 0r ~/.vim/skel/template.zsh
au BufNewFile *.zsh exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
au BufWritePost *.zsh :silent !chmod a+x <afile>
augroup end "}}}

"" autocomandos para python"{{{
augroup python
    au FileType python set keywordprg=pydoc
    au! BufRead *.py setlocal smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
    au! BufRead,Bufnewfile *.py im :<CR> :<CR><TAB>
    au! BufWritePre *.py,*.js :call <SID>CleanExtraSpacesFunction()
    au! BufNewFile *.py 0r ~/.vim/skel/template.py
    au BufNewFile *.py exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
    au! BufWritePost *.py :silent !chmod a+x <afile>
    autocmd FileType python set textwidth=79
    autocmd FileType python filetype indent on
    let python_highlight_all=1
    let python_highlight_builtins=0
    let python_highlight_builtins=1
    let python_highlight_exceptions=1
    let python_highlight_numbers=1
    let python_highlight_space_errors=1
augroup end"}}}

augroup html"{{{
" au! <--> Remove all html autocommands
au!
 au BufNewFile,BufRead *.html,*.shtml,*.htm set ft=html
 "au BufNewFile,BufRead,BufEnter  *.html,*.shtml,*.htm so ~/.vim/skel/skel.html
 au BufNewFile *.html 0r ~/.vim/skel/skel.html | let IndentStyle = "html"
 "au BufNewFile *.html,*.shtml,*.htm /body/+
 au BufNewFile,BufRead *.html,*.shtml,*.htm set noautoindent
 au BufNewFile,BufRead *.html,*.shtml,*.htm set nolist
 au BufNewFile,BufRead *.html,*.shtml,*.htm call LastModified()
 " needed one line with 'Created:' in firsts 5 lines
 "au Bufnewfile,BufRead *.html,*.shtml,*.htm 1,5s/\s*Created:\s*\zs.*/\="" . strftime("%Y %b %d %X")/ge
 au BufNewFile,BufRead *.html,*.shtml,*.htm exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
augroup end"}}}

augroup css"{{{
  au Bufnewfile,BufRead *.css set ft=css
  au BufNewFile *.css 0r ~/.vim/skel/template.css
  autocmd FileType css set omnifunc=csscomplete#CompleteCSS
  "au BufNewFile *.css exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
  au BufNewFile *.css exe "1," . 10 . "s/Creation Date:.*/Creation Date: " .strftime("%c")
augroup end"}}}

augroup tex"{{{
  au Bufnewfile,BufRead *.tex set ft=tex
  au BufNewFile *.tex 0r ~/.vim/skel/template.tex
  au BufNewFile *.tex exe "1," . 10 . "s/Creation Date:.*/Creation Date: " .strftime("%c")
  vmap e <tab>em<tab>
  vmap ' <tab>'<tab>
  iab latex \LaTeX\
  normal gg
augroup end"}}}

if has("autocmd") && exists("+omnifunc")
 autocmd Filetype *
  \  if &omnifunc == "" |
  \  setlocal omnifunc=syntaxcomplete#Complete |
  \ endif
endif

" um destaque especial para MinhasNotas
highlight MinhasNotas ctermbg=Yellow ctermfg=red guibg=Yellow guifg=red
match MinhasNotas /[Nn]otas\?:\?/

" mapeamento para abrir e fechar folders em modo normal usando
" a barra de espaços -- zR abre todos os folders
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
"nmap <space> :
" para colocar um atalho para abrir e fechar folders faça:
" set foldcolumn=1

" insert blank line before/after
" http://va.mu/Tjvu
nnoremap <silent> [<space> :pu! _<cr>:']+1<cr>
nnoremap <silent> ]<space> :pu _<cr>:'[-1<cr>

if exists('+autochdir')
 set autochdir
else
 autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /
endif
"autocmd BufEnter * lcd %:p:h

augroup vimrc-remember-cursor-position
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END


iab idate <c-r>=strftime("%A %d/%m/%Y")<cr>
iab ihora <c-r>=strftime("%H:%M:%S")<cr>

iab -> →
iab tambem também
iab fro for
iab ,m <voyeg3r  gmail.com>
iab mymail <voyeg3r  gmail.com>
iab slas Sérgio Luiz Araújo Silva
iab vc você
iab teh the
iab a. ª
iab analize análise
iab angulo ângulo
iab apos após
iab apra para
iab aqeule aquele
iab aqiulo aquilo
iab arcoíris arco-íris
iab aré até
iab asim assim
iab aspeto aspecto
iab assenção ascenção
iab assin assim
iab assougue açougue
iab aue que
iab augum algum
iab augun algum
iab ben bem
iab beringela berinjela
iab bon bom
iab cafe café
iab caichote caixote
iab capitões capitães
iab cidadães cidadãos
iab ckaro claro
iab cliche clichê
iab compreenssão compreensão
iab comprensão compreensão
iab comun comum
iab con com
iab contezto contexto
iab corrijir corrigir
iab coxixar cochichar
iab cpm com
iab cppara para
iab dai daí
iab danca dança
iab decer descer
iab definitamente definitivamente
iab deshonestidade desonestidade
iab deshonesto desonesto
iab detale detalhe
iab deven devem
iab díficil difícil
iab distingeu distingue
iab dsa das
iab dze dez
iab ecessão exceção
iab ecessões exceções
iab eentão e então
iab emb bem
iab ems sem
iab emu meu
iab en em
iab enbora embora
iab equ que
iab ero erro
iab erv ver
iab ese esse
iab esselência excelência
iab esu seu
iab excessão exceção
iab Excesões exceções
iab excurção excursão
iab Exenplo exemplo
iab exeplo exemplo
iab exijência exigência
iab exijir exigir
iab expontâneo espontâneo
iab ezemplo exemplo
iab ezercício exercício
iab faciu fácil
iab fas faz
iab fente gente
iab ferias férias
iab geito jeito
iab gibóia jibóia
iab gipe jipe
iab ha há
iab hezitação hesitação
iab hezitar hesitar
iab http:\\ http:
iab iigor igor
iab interesado interessado
iab interese interesse
iab Irria Iria
iab isot isto
iab ítens itens
iab ja já
iab jente gente
iab linguiça lingüiça
iab masi mais
iab maz mas
iab con com
iab mema mesma
iab mes mês
iab muinto muito
iab nao não
iab nehum nenhum
iab nenina menina
iab noã não
iab no. nº
iab N. Nº
iab o. º
iab obiter obter
iab observacao observação
iab ons nos
iab orijem origem
iab ospital hospital
iab poden podem
iab portugu6es português
iab potuguês português
iab precisan precisam
iab própio próprio
iab quado quando
iab quiz quis
iab recizão rescisão
iab sanque sangue
iab sao são
iab sen sem
iab sensivel sensível
iab sequéncia seqüência
iab significatimente significativam
iab sinceranete sinceramente
iab sovre sobre
iab susseder suceder
iab tanbem também
iab testo texto
iab téxtil têxtil
iab tydo tudo
iab tuiter http://www.twitter.com/voyeg3r
iab una uma
iab unico único
iab utilise utilize
iab vega veja
iab vivaotux http://vivaotux.blogspot.com
iab vja veja
iab voc6e você
iab wue que
iab xave chave

iab 1a. 1ª
iab 2a. 2ª
iab 3a. 3ª
iab 4a. 4ª
iab 5a. 5ª
iab 6a. 6ª
iab 7a. 7ª
iab 8a. 8ª
iab 9a. 9ª
iab 10a. 10ª
iab 11a. 11ª
iab 12a. 12ª
iab 13a. 13ª
iab 14a. 14ª
iab 15a. 15ª

" caso o teclado esteja desconfigurado use:
"iab 'a á
"iab 'e é
"iab 'i í
"iab 'o ó
"iab ~a ã
"iab ^a â
"iab `a à
"iab ,c ç
"iab ^e ê
"iab ^o ô
"iab ~o õ
"iab 'u ú
