" vim:set et sw=4 ts=4:fdl=3:
" Arquivo de configuração do vim
" Criado: Qua 02/Ago/2006 hs 09:19
" Last Change: sáb 16 set 2017 15:01:34 -03
" Autor: Sergio Luiz Araujo Silva
" Codificação: utf-8
" Site: http://vivaotux.blogspot.com
" Mail: voyeg3r ✉ gmail
" Twitter: http://www.twitter.com/voyeg3r
" Licence: Licença: Use esse código sob os termos da licença GNU versão 3
" Garantia: O autor não se responsabiliza por eventuais danos
" causados pelo uso deste arquivo.
" my old vimrc: https://github.com/voyeg3r/dotfiles/blob/02b8a11b9f9e98c33d7290aea509004110305989/rcfiles/vim/vimrc
"
"                 ( O O )
"  +===========oOO==(_)==OOo=============+
"  |                                     |
"  |    °v°   Sergio Luiz Araujo Silva   |
"  |   /(_)\  Linux User #423493         |
"  |    ^ ^   voyeg3r ✉ gmail.com        |
"  +=====================================+

"" Plug bootstrap - Install Plug if it is not already installed{{{
"if empty(glob('~/.dotfiles/vim/autoload/plug.vim'))
"    silent !curl -fLo ~/.dotfiles/vim/autoload/plug.vim --create-dirs
"                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"    autocmd VimEnter * PlugInstall | source $MYVIMRC
"endif
"}}}

set viminfo=%,<800,'10,/50,:100,h,f1,n~/.viminfo "{{{1
"           | |    |   |   |    | |  + viminfo file path
"           | |    |   |   |    | + file marks 0-9,A-Z 0=NOT stored
"           | |    |   |   |    + disable 'hlsearch' loading viminfo
"           | |    |   |   + command-line history saved
"           | |    |   + search history saved
"           | |    + files marks saved
"           | + lines saved each register (old name for <, vi6.2)
"           + save/restore buffer list
"}}}

if !exists("*VimReloadFunction")
    fun! VimReloadFunction()
        call Preserve(":source ~/.vimrc")
    endfu
endif
com! ReloadVim call VimReloadFunction()

" some settings {{{1
set mousemodel=popup
set ruler
set number relativenumber
set mouse=a
set t_Co=256
set guioptions=egmrti
set gfn=Ubuntu\ Mono\ derivative\ Powerline\ 14
set anti enc=utf-8
set scrolloff=3
set laststatus=2
set modeline
set modelines=10
set title
set titleold="Terminal"
set titlestring=%F
set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
"set statusline=%F%m%r%h%w\ %{&ff}\ %Y\ ascii=\%03.3b\ hex=\%02.2B\ line=%l\ col=%02v\ %p%%\ len=%L
set nocompatible
set path+=**
set history=200
set isfname+={,}
set wildmenu
set wildmode=longest:full,full
set completeopt=longest,menuone
"set completeopt=menu,preview
set complete=.,w,k
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set bomb
set binary
set backspace=indent,eol,start
set tabstop=4
set softtabstop=0
set shiftwidth=4
set expandtab
set hidden
set hlsearch
set incsearch
set ignorecase
set smartcase
set nobackup
set fileformats=unix,dos,mac
set showcmd
set listchars=trail:·,precedes:«,extends:»,eol:↲,tab:▸\
set lcs+=space:·
"}}}

setlocal complete=.,w,k,b,u
let mapleader=','

" entrar no modo comando mais rápido
nnoremap ç :
noremap ' `
nnoremap K :help <C-r><C-w><CR>

call plug#begin(expand('~/.dotfiles/vim/bundle')) "{{{1

Plug 'tpope/vim-speeddating'
Plug 'tommcdo/vim-exchange'
Plug 'coderifous/textobj-word-column.vim'
"Plug 'nelstrom/vim-visual-star-search'
Plug 'nelstrom/vim-markdown-folding'
"Plug 'jiangmiao/auto-pairs'
Plug 'rstacruz/vim-closer'
"Plug 'haya14busa/incsearch.vim'
"Plug 'inside/vim-search-pulse'
Plug 'tpope/vim-markdown'
Plug 'sjl/gundo.vim'
Plug 'chrisbra/NrrwRgn'
"Plug 'vim-airline/vim-airline'
"Plug 'vim-airline/vim-airline-themes'
Plug 'eparreno/vim-l9'
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'vimwiki/vimwiki'
Plug 'vim-scripts/VisIncr'
Plug 'vim-scripts/AutoComplPop'
"Plug 'kshenoy/vim-signature' "Plugin to toggle, display and navigate marks

"" Color
Plug 'tomasr/molokai'
Plug 'endel/vim-github-colorscheme'
Plug 'jnurmine/Zenburn'
Plug 'altercation/vim-colors-solarized'
Plug 'https://github.com/juanedi/predawn.vim'
"Plug 'NLKNguyen/papercolor-theme'
Plug 'chriskempson/tomorrow-theme'

if isdirectory('/usr/local/opt/fzf')
  Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
else
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
  Plug 'junegunn/fzf.vim'
endif

call plug#end()"}}}

" netrw config
let g:netrw_banner = 0
let g:netrw_browse_split = 1
let g:netrw_winsize = 25

colorscheme tomorrow

" fzf configuration
" <C-p> to search files
nnoremap <silent> <c-p> :FZF -m ~/.dotfiles<cr>
" end - fzf configuration

" <M-p> for open buffers
nnoremap <silent> <leader>b :Buffers<cr>

" <M-S-p> for MRU
nnoremap <silent> <leader>m :History<cr>

command! FZFMru call fzf#run({
\  'source':  v:oldfiles,
\  'sink':    'e',
\  'options': '-m -x +s',
\  'down':    '40%'})

" bind K to grep word under cursor
"nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
" bind \ (backward slash) to grep shortcut
"command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap ,ag :Ag<SPACE>



" pairs
for mapmode in [ "o", "x" ]
    for delimiter in [ "{}", "()", "[]", "<>" ]
        let opening = delimiter[0]
        let closing = delimiter[1]
        for modifier in [ "i", "a" ]
            for trigger in [ opening, closing ]
                execute mapmode . "noremap <silent> " . modifier . "n" . trigger . " :<C-U>normal! f" . opening . "v" . modifier . closing . "<CR>"
                execute mapmode . "noremap <silent> " . modifier . "l" . trigger . " :<C-U>normal! F" . closing . "v" . modifier . opening . "<CR>"
            endfor
        endfor
    endfor

    " single (text objects like da. delete one dot)
    for delimiter in [ "_", ".", ":", ",", ";", "<bar>", "/", "<bslash>", "*" ]
        execute mapmode . "noremap <silent> i"  . delimiter . " :<C-U>normal! t" . delimiter .  "vT" . delimiter . "<CR>"
        execute mapmode . "noremap <silent> a"  . delimiter . " :<C-U>normal! f" . delimiter .  "vT" . delimiter . "<CR>"
        execute mapmode . "noremap <silent> in" . delimiter . " :<C-U>normal! f" . delimiter . "lvt" . delimiter . "<CR>"
        execute mapmode . "noremap <silent> an" . delimiter . " :<C-U>normal! f" . delimiter . "lvf" . delimiter . "<CR>"
        execute mapmode . "noremap <silent> il" . delimiter . " :<C-U>normal! F" . delimiter . "hvT" . delimiter . "<CR>"
        execute mapmode . "noremap <silent> al" . delimiter . " :<C-U>normal! F" . delimiter .  "vT" . delimiter . "<CR>"
    endfor

    " double (text objects like dan" delete both quotes)
    " doesn't handle one surrounding whitespace like da" does
    for delimiter in [ "\"", "'", "`" ]
        execute mapmode . "noremap <silent> in" . delimiter . " :<C-U>normal! f" . delimiter . "lvt" . delimiter . "<CR>" | " same as above
        execute mapmode . "noremap <silent> an" . delimiter . " :<C-U>normal! f" . delimiter .  "vf" . delimiter . "<CR>" | " same as above
        execute mapmode . "noremap <silent> il" . delimiter . " :<C-U>normal! F" . delimiter . "hvT" . delimiter . "<CR>"
        execute mapmode . "noremap <silent> al" . delimiter . " :<C-U>normal! F" . delimiter .  "vF" . delimiter . "<CR>"
    endfor
endfor

"" fzf.vim
"set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

" The Silver Searcher
if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
endif

if executable('par')
    set formatprg=par\ -w60rj
endif

cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>e :FZF -m<CR>

" Required:
filetype plugin indent on

" index do vim wiki
let g:vimwiki_list = [{'path': '~/.dotfiles/vim/wiki', 'index': 'main', 'syntax': 'markdown', 'ext': '.md',
                     \  'automatic_nested_syntaxes': 1, 'auto_toc': 1}]
let g:vimwiki_folding = 'syntax'
nnoremap == <Plug>VimwikiAddHeaderLevel
nnoremap -- <Plug>VimwikiRemoveHeaderLevel
"*:VimwikiSearch* /pattern/
"*:VWS* /pattern/
"    Search for /pattern/ in all files of current wiki.
"    To display all matches use |:lopen| command.
"    To display next match use |:lnext| command.
"    To display previous match use |:lprevious| command.
let g:vimwiki_table_mappings = 0

" Visual Settings
" Notice: syntax enable is better than syntax on
if !exists("g:syntax_on")
    syntax enable
endif

let mapleader = ","

let no_buffers_menu=1

if exists("*fugitive#statusline")
  set statusline+=%{fugitive#statusline()}
endif

" vim-airline
"let g:airline_theme = 'powerlineish'
"let g:airline#extensions#syntastic#enabled = 1
"let g:airline#extensions#branch#enabled = 1
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tagbar#enabled = 1
"let g:airline_skip_empty_sections = 1

" Highlight redundant whitespace and tabs.
" This has the advantage of not highlighting each space you type at
" the end of the line, only when you open a file or leave insert
" mode. Very neat."
" Reference: http://vim.wikia.com/wiki/Highlight_unwanted_spaces
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
"au BufEnter * match ExtraWhitespace /\s\+$/
autocmd InsertLeave * redraw!

"set background=light
if has('gui_running')
    set background=light
else
    set background=dark
endif
"colorscheme solarized
" source: http://tilvim.com/2013/07/31/swapping-bg.html
nnoremap <F7> :let &background = ( &background == "dark"? "light" : "dark" )<CR>

" Create a red/red scheme
highlight Problem ctermbg=red guibg=red
" Highlight leading tabs - tab misturado com espaço
match Problem /^\s\*\t\+\s\*/

" more command line Abbreviations
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite

" When double click a word vim will hightlight all other ocurences
nnoremap <silent> <2-LeftMouse> :let @/='\V\<'.escape(expand('<cword>'), '\').'\>'<cr>:set hls<cr>
nnoremap <leader>s :let @/='\V\<'.escape(expand('<cword>'), '\').'\>'<cr>:set hls<cr>
nnoremap <leader>* *``cgn

hi Search ctermfg=Yellow ctermbg=NONE cterm=bold,underline

" This function requires you select the numbers
" source: https://vi.stackexchange.com/a/4699/7339
fun! SumVis()
    try
        let l:a_save = @a
        norm! gv"ay
        let @a = substitute(@a,'[^0-9. ]','+','g')
        exec "norm! '>o"
        exec "norm! iTotal: \<c-r>=\<c-r>a\<cr>"
     finally
        let @a = l:a_save
     endtry
endfun
vnoremap <C-s> :<C-u>call SumVis()<cr>

" alternate between relative number, number and no number
"nmap ,r :set rnu!<cr>
"nnoremap ,r :let [&nu, &rnu] = [!&rnu, &nu+&rnu==1]<cr>

inoremap <leader>r <C-r>=system('echo "$(($RANDOM % 1000))"')<cr>

"  when searching next patter put it in the middle of screen
nnoremap n nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz

augroup sh
    au BufNewFile *.sh 0r ~/.vim/skel/template.sh
    au BufNewFile *.sh exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " . strftime("%d-%m-%Y")/e
    "au BufWritePost *.sh :silent !chmod a+x <afile>
augroup end

augroup zsh
    au BufNewFile *.zsh 0r ~/.vim/skel/template.zsh
    au BufNewFile *.zsh exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " . strftime("%d-%m-%Y")/e
    au BufWritePost *.zsh :silent !chmod a+x <afile>
augroup end

augroup html
    " au! <--> Remove all html autocommands
    au!
    au BufNewFile,BufRead *.html,*.shtml,*.htm set ft=html
    "au BufNewFile,BufRead,BufEnter  *.html,*.shtml,*.htm so ~/.vim/skel/skel.html
    au BufNewFile *.html 0r ~/.vim/skel/skel.html | let IndentStyle = "html"
    "au BufNewFile *.html,*.shtml,*.htm /body/+
    au BufNewFile,BufRead *.html,*.shtml,*.htm set noautoindent
    au BufNewFile,BufRead *.html,*.shtml,*.htm set nolist
    au BufNewFile,BufRead *.html,*.shtml,*.htm call LastModified()
    " needed one line with 'Created:' in firsts 5 lines
    "au Bufnewfile,BufRead *.html,*.shtml,*.htm 1,5s/\s*Created:\s*\zs.*/\="" . strftime("%Y %b %d %X")/ge
    au BufNewFile,BufRead *.html,*.shtml,*.htm exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
augroup end

augroup css
    au Bufnewfile,BufRead *.css set ft=css
    au BufNewFile *.css 0r ~/.vim/skel/template.css
    autocmd FileType css set omnifunc=csscomplete#CompleteCSS
    "au BufNewFile *.css exe "1," . 10 . "s/Creation Date:.*/Creation Date:    " .strftime("%d-%m-%Y")
    au BufNewFile *.css exe "1," . 10 . "s/Creation Date:.*/Creation Date: " .strftime("%c")
augroup end

augroup tex
    au Bufnewfile,BufRead *.tex set ft=tex
    au BufNewFile *.tex 0r ~/.vim/skel/template.tex
    au BufNewFile *.tex exe "1," . 10 . "s/Creation Date:.*/Creation Date: " .strftime("%c")
    vnoremap e <tab>em<tab>
    vnoremap ' <tab>'<tab>
    iab latex \LaTeX\
    iab tex \Tex\
    normal gg
augroup end

" omnifunc settings
if has("autocmd") && exists("+omnifunc")
    autocmd Filetype *
                \  if &omnifunc == "" |
                \  setlocal omnifunc=syntaxcomplete#Complete |
                \ endif
endif

" select last paste in visual mode
nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'
noremap gV `[v`]
"nnoremap <expr> gV "`[".getregtype(v:register)[0]."`]"

let Grep_Default_Options = '-IR'
let Grep_Skip_Files = '*.log *.db'
let Grep_Skip_Dirs = '.git node_modules'

" set wrapping
if !exists('*s:setupWrapping')
  function s:setupWrapping()
    set wrap
    set wm=2
    set textwidth=66
    set formatoptions+=t
  endfunction
endif

" function to clear all registers
" http://stackoverflow.com/questions/19430200/how-to-clear-vim-registers-effectively
fun! s:ClearRegs()
    "let regs=split('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-"', '\zs')
    "for r in regs
    "    call setreg(r, [])
    "endfor
    for i in range(34,122) | silent! call setreg(nr2char(i), [])  | endfor
endfun
command! -nargs=0 Cregs call s:ClearRegs()

" this function gets last 20 cmds to new buffer
fun! s:RedirHistoryCommands()
    set paste
    redir @r
    history : -20,
    redir End
    new
    put r
    set nopaste
    :%s/^\s\+//g
    :g/^$/d
endfun
command! -nargs=0 GetHistory call s:RedirHistoryCommands()

" Esta função insere um change log
" se nelas não houver "Last Change" ele passa batido
" ou seja não insere o cabeçalho
" usr_41.txt
fun! InsertChangeLog()
  let l:flag=0
  for i in range(1,5)
    if getline(i) !~ '.*Last Change.*'
      let l:flag = l:flag + 1
    endif
  endfor
  if l:flag >= 5
    normal(1G)
    call append(0, "Arquivo: <+Description+>")
    call append(1, "Created: " . strftime("%a %d/%b/%Y hs %H:%M"))
    call append(2, "Last Change: " . strftime("%a %d/%b/%Y hs %H:%M"))
    call append(3, "autor: <+digite seu nome+>")
    call append(4, "site: <+digite o endereço de seu site+>")
    call append(5, "twitter: <+your twitter here+>")
    call append(6, "email: <+seu email+>")
    normal gg
  endif
endfun

" Esta função Modifica o change log
" If buffer modified, update any 'Last modified: ' in the first 5 lines.
" Restores cursor and window position using save_cursor variable.
" source: http://vim.wikia.com/wiki/Insert_current_date_or_time
function! LastModified()
    if &modified
        if line('$')>=5
            call Preserve('1,5s/Last Change: \zs.*/\=strftime("%c")/e')
        endif
    endif
endfun
command! -nargs=0 LM :call LastModified()<cr>
autocmd BufWritePre * :call LastModified()
map <silent> <F9> <esc>:call LastModified()<cr>

fun! ChangeHeader()
    if line('$')>=5
        call Preserve('1,5s/Last Change: \zs.*/\=strftime("%c")/e')
    endif
endfun
command! -nargs=0 CH :call ChangeHeader()
au BufWritePost * :call ChangeHeader()

" jump to next place holder
function! JumpToNextPlaceholder()
    let old_query = getreg('/')
    echo search("<+.\\++>")
    exec "norm! c/+>/e\<CR>"
    call setreg('/', old_query)
endfunction
nnoremap <special> <leader>j :keepjumps call JumpToNextPlaceholder()<CR>a
inoremap <special> <leader>j <ESC>:keepjumps call JumpToNextPlaceholder()<CR>a

" join lines without moving the cursor (gJ prevent adding spaces between lines joined)
nnoremap J :call Preserve("exec 'normal! J'")<cr>
nnoremap gJ :call Preserve("exec 'normal! gJ'")<cr>

" The function must be used in a piece of subtitles
" in order to clean it, join the lines and put the results
" on clipboard to be pasted on anki
fun! CleanSubtitles()
    let old_query = getreg('/')
    :g/^\(\s\+\)\=\d\+$/d
    :g/^\(\s\+\)\=\d\+.*-->\s\d[^,]*,\d\d\d$/d
    :%j
    :%s/,/, /g
    :%s,\s\+, ,g
    :%y+
    call setreg('/', old_query)
endfun
command! -nargs=0 GetSubs :call CleanSubtitles()

" sometimes you need to know how many opened buffers you have
" source: https://superuser.com/a/1221514/45032
fun! CountBuffers()
    "let l:total = len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
    let l:total = len(getbufinfo({'buflisted':1}))
    echom "you have " . l:total . " opened buffers!"
endfun
command! -nargs=0 Nbufs :call CountBuffers()

" Utility function that save last search and cursor position
" http://technotales.wordpress.com/2010/03/31/preserve-a-vim-function-that-keeps-your-state/
" video from vimcasts.org: http://vimcasts.org/episodes/tidying-whitespace
if !exists('*Preserve')
    function! Preserve(command)
        try
            " Preparation: save last search, and cursor position.
            let l:win_view = winsaveview()
            let l:old_query = getreg('/')
            silent! execute 'keepjumps ' . a:command
         finally
            " Clean up: restore previous search history, and cursor position
            call winrestview(l:win_view)
            call setreg('/', l:old_query)
         endtry
    endfunction
endif

"http://vi.stackexchange.com/questions/9646/how-do-i-capitalize-the-first-word-after-each-period-question-mark-or-exclamati
fun! UpperCaseSentences()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    %s;[.?!]\_s*\zs\<\w\+\>;\U&;g
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

" dos2unix ^M
fun! Dos2unixFunction()
    call Preserve("%s/$//ge")
    "call Preserve("%s/\\x0D$//")
    set ff=unix
    set bomb
    set encoding=utf-8
    set fileencoding=utf-8
endfun
com! Dos2Unix call Dos2unixFunction()

" one liner rename file
" source: http://stackoverflow.com/questions/1205286/renaming-the-current-file-in-vim
command! -nargs=1 Rename try | saveas <args> | call delete(expand('#')) | bd # | endtry

"source: http://stackoverflow.com/questions/2284556/how-do-i-use-variables-in-my-vimrc
function! SetTabSize(size)
    execute "set tabstop=".a:size
    execute "set shiftwidth=".a:size
    execute "set softtabstop=".a:size
endfunction
command! -nargs=1 Sts call SetTabSize(<f-args>)

fun! DelBlankLines()
    call Preserve('%s/^\n\{2,}/\r/ge')
endfun
command! -nargs=0 DelBlank :call DelBlankLines()

command! -nargs=0 Reindent :call Preserve('exec "normal! gg=G"')

" delete sucessive blank lines and trailing spces
nnoremap <special> <leader>d :call DelBlankLines()<cr>

" Insert lines below and above (with count)
nnoremap <silent> <leader>o :<C-u>call append(line("."),   repeat([""], v:count1))<CR>
nnoremap <silent> <leader>O :<C-u>call append(line(".")-1, repeat([""], v:count1))<CR>

fun! CleanExtraSpaces()
    call Preserve('%s/\s\+$//ge')
endfun
com! Cls :call CleanExtraSpaces()
au! BufwritePre * :call CleanExtraSpaces()

" ************************ End functions *****************

set nopaste
nnoremap <F3> :set invpaste paste?<CR>

set pastetoggle=<F2>
set showmode

nnoremap <F5> :GundoToggle<CR>

set undofile " Maintain undo history between sessions
set undodir=~/.vimundodir

" move vertically by visual line
" source: https://stackoverflow.com/a/21000307/2571881
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" Sudo to write
cmap w!! w !sudo tee % >/dev/null
command! SaveAsRoot w !sudo tee %

" to reselect use gv in normal mode
nnoremap <S-F11> <ESC>:set hls!<cr>
inoremap <S-F11> <C-o>:set hls!<cr>
vnoremap <S-F11> <ESC>:set hls!<cr> <bar> gv

" make copying from visual selection more sane
" source: http://ddrscott.github.io/blog/2016/yank-without-jank/
vnoremap <expr>y "my\"" . v:register . "y`y"

" Buble single lines - mover linhas
" http://vimcasts.org/episodes/bubbling-text/
nnoremap <special> <c-up> ddkP
nnoremap <special> <c-down> ddp
"buble multiple lines
xmap <c-up> xkP`[V`]
xmap <c-down> xp`[V`]

"" The PC is fast enough, do syntax highlight syncing from start
augroup vimrc-sync-fromstart
  autocmd!
  autocmd BufEnter * :syntax sync fromstart
augroup END

"" Remember cursor position
augroup vimrc-remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" txt wrap setting
augroup vimrc-wrapping
  autocmd!
  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
augroup END

"" make/cmake
augroup vimrc-make-cmake
  autocmd!
  autocmd FileType make setlocal noexpandtab
  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
augroup END

augroup markdown
    autocmd FileType markdown,vimwiki setlocal textwidth=78 formatprg=par\ -w78
augroup END

set autoread

map <silent> <leader>v :e ~/.vimrc<cr>
map <silent> <leader>z :e ~/.zshrc<cr>

"" Git stuff
noremap <Leader>ga :Gwrite<CR>
noremap <Leader>gc :Gcommit<CR>
noremap <Leader>gsh :Gpush<CR>
noremap <Leader>gll :Gpull<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gr :Gremove<CR>

if exists('+autochdir')
    set autochdir
else
    autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /
endif
"autocmd BufEnter * lcd %:p:h

" mapeamento para abrir e fechar folders em modo normal usando
" a barra de espaços -- zR abre todos os folders
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" snippets settings
"let g:UltiSnips#ListSnippets="<C-tab>"
let g:UltiSnipsListSnippets = "<c-tab>"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

if exists(":python3")
   let g:_uspy=":python3"
    let g:ultisnipsusepythonversion = 3
endif

let g:UltiSnipsSnippetsDir = expand("~/.dotfiles/vim/snips/")
let g:UltiSnipsSnippetDirectories=["snips", "UltiSnips"]
map <leader>u :UltiSnipsEdit<cr>
" Snippets variables
let g:snips_author='Sergio Araujo'
let g:snips_site='http://vivaotux.blogspot.com'
let g:snips_email='<voyeg3r ✉ gmail.com>'
let g:snips_github='https://github.com/voyeg3r'
let g:snips_twitter='@voyeg3r'
let g:UltiSnipsEditSplit="horizontal"

function! ExpandPossibleShorterSnippet()
  if len(UltiSnips#SnippetsInCurrentScope()) == 1 "only one candidate...
    let curr_key = keys(UltiSnips#SnippetsInCurrentScope())[0]
    normal diw
    exe "normal a" . curr_key
    exe "normal a "
    return 1
  endif
  return 0
endfunction
inoremap <silent> <C-L> <C-R>=(ExpandPossibleShorterSnippet() == 0? '': UltiSnips#ExpandSnippet())<CR>

" open quickfix window with word under cursor as search pattern
nnoremap <F4> :execute "vimgrep /" . expand("<cword>") . "/gji **" <Bar> cw<CR>

" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

set clipboard=unnamed,unnamedplus

" Identação de textos e códigos com o TAB no modo visual
" URL: http://gustavodutra.com/post/72/dicas-de-movimentacao-e-identacao-no-gvim/

" To increase indentation you can you in insert mode
" Ctrl-t and to decrease use Ctrl-d
vnoremap < <gv
vnoremap > >gv

"" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Make the dot command work as expected in visual mode (via
" https://www.reddit.com/r/vim/comments/3y2mgt/
vnoremap . :norm.<CR>

" html
" for html files, 2 spaces
autocmd Filetype html setlocal ts=2 sw=2 expandtab

" vim-airline
"let g:airline#extensions#virtualenv#enabled = 1

" vim-airline
"if !exists('g:airline_symbols')
"  let g:airline_symbols = {}
"endif

"if !exists('g:airline_powerline_fonts')
"  let g:airline#extensions#tabline#left_sep = ' '
"  let g:airline#extensions#tabline#left_alt_sep = '|'
"  let g:airline_left_sep          = '▶'
"  let g:airline_left_alt_sep      = '»'
"  let g:airline_right_sep         = '◀'
"  let g:airline_right_alt_sep     = '«'
"  let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
"  let g:airline#extensions#readonly#symbol   = '⊘'
"  let g:airline#extensions#linecolumn#prefix = '¶'
"  let g:airline#extensions#paste#symbol      = 'ρ'
"  let g:airline_symbols.linenr    = '␊'
"  let g:airline_symbols.branch    = '⎇'
"  let g:airline_symbols.paste     = 'ρ'
"  let g:airline_symbols.paste     = 'Þ'
"  let g:airline_symbols.paste     = '∥'
"  let g:airline_symbols.whitespace = 'Ξ'
"else
"  let g:airline#extensions#tabline#left_sep = ''
"  let g:airline#extensions#tabline#left_alt_sep = ''
"
"  " powerline symbols
"  let g:airline_left_sep = ''
"  let g:airline_left_alt_sep = ''
"  let g:airline_right_sep = ''
"  let g:airline_right_alt_sep = ''
"  let g:airline_symbols.branch = ''
"  let g:airline_symbols.readonly = ''
"  let g:airline_symbols.linenr = ''
"endif

iab idate <c-r>=strftime("%Y-%m-%d %H:%M:%S")<cr>
iab ihora <c-r>=strftime("%H:%M:%S")<cr>
"iab fname <c-r>=expand("%:p")<cr>
iab fname <c-r>=expand("%")<cr>

iab -> →
iab mymail <voyeg3r ✉ gmail.com>
iab slas Sérgio Luiz Araújo Silva
iab tuiter http://www.twitter.com/voyeg3r
iab vivaotux http://vivaotux.blogspot.com
